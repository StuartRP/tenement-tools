# -*- coding: utf-8 -*-# https://pro.arcgis.com/en/pro-app/latest/arcpy/geoprocessing_and_python/a-quick-tour-of-python-toolboxes.htmimport arcpyclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [Tool, GDVSpectra]class Tool(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Tool"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        params = None        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        returnclass GDVSpectra(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "GDVSpectra"        self.description = "GDVSpectra contains functions that derive " \                           "potential groundwater dependent vegetation from " \                           "a time series of Landsat or Sentinel data."        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""                # parameter 1        param0 = arcpy.Parameter(                    displayName="Input project folder",                    name="in_project_folder",                    datatype="DEWorkspace",                    parameterType="Required",                    direction="Input"                 )                         # parameter 2        param1 = arcpy.Parameter(                    displayName="Input study area feature",                    name="in_studyarea_feat",                    datatype="GPFeatureLayer",                    parameterType="Required",                    direction="Input"                 )                # set study area to be polygon only        param1.filter.list = ['Polygon']                # in_wet_months        par_wet_months = arcpy.Parameter(                            displayName="Wet month(s)",                            name="in_wet_months",                            datatype="GPString",                            parameterType="Required",                            direction="Input",                            multiValue=False)                                    # set default wet months        par_wet_months.values = '1, 2, 3'                # in_dry_months        par_dry_months = arcpy.Parameter(                            displayName="Dry month(s)",                            name="in_dry_months",                            datatype="GPString",                            parameterType="Required",                            direction="Input",                            multiValue=False)                                    # set default dry months        par_dry_months.values = '9, 10, 11'                # in_veg_idx        par_veg_idx = arcpy.Parameter(                        displayName="Vegetation index",                        name="in_veg_idx",                        datatype="GPString",                        parameterType="Required",                        direction="Input",                        multiValue=False)                                    # set default veg idx        par_veg_idx.value = 'mavi'        par_veg_idx.filter.type = 'ValueList'        par_veg_idx.filter.list = [            'ndvi',            'evi',             'savi',            'msavi',            'slavi',            'mavi',            'kndvi',            'tcg',            'tcb',            'tcw'            ]                # in_mst_idx        par_mst_idx = arcpy.Parameter(                        displayName="Moisture index",                        name="in_mst_idx",                        datatype="GPString",                        parameterType="Required",                        direction="Input",                        multiValue=False)                                    # set default mst idx        par_mst_idx.value = 'ndmi'        par_mst_idx.filter.type = 'ValueList'        par_mst_idx.filter.list = [            'ndmi',            'gvmi'            ]                    # set pvalue for zscore        par_zscore_pvalue = arcpy.Parameter(                                displayName="Z-score p-value",                                name="in_zscore_pvalue",                                datatype="GPDouble",                                parameterType="Optional",                                direction="Input",                                category='Outlier correction',                                multiValue=False)                                    # set default mst idx        par_zscore_pvalue.value = None        parameters = [            par_wet_months,             par_dry_months,             par_veg_idx,             par_mst_idx,             par_zscore_pvalue]                return parameters    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""                        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""                # imports        import os, sys        import numpy as np        import pandas as pd        import xarray as xr                # import tools        sys.path.append('../../../shared')        import satfetcher, tools                # import gdvspectra module        sys.path.append('../../../modules')        import gdvspectra                # notify user        arcpy.AddMessage('Preparing input parameters.')                # get path to netcdf... ask for it?        nc_path = r"C:\Users\Lewis\Desktop\yandi_ls_16to20_raw.nc"                # get platform... ask for it?        platform = 'landsat'                # clean up wet months         wet_month = parameters[0].value        if wet_month:            wet_month = [int(e) for e in wet_month.split(',')]                # clean up dry months         dry_month = parameters[1].value        if dry_month:            dry_month = [int(e) for e in dry_month.split(',')]                    # get veg_idx, mst_idx from parameters         veg_idx, mst_idx = parameters[2].value, parameters[3].value                # get zscore p-value        zscore_pvalue = parameters[4].value # fix                # get interpolation method         # todo full or half                # get q upper, q lower for invariant target         # todo                # set veg mask quantile for similairity        # todo                                        # notify user        arcpy.AddMessage('Initialising GDVSpectra tool.')        # load netcdf        arcpy.AddMessage('Loading provided NetCDF file.')        ds = satfetcher.load_local_nc(nc_path=nc_path,                                       use_dask=True,                                       conform_nodata_to=-9999)        # show ds        #arcpy.AddMessage(ds)                      # conform band names from dea to basic        arcpy.AddMessage('Conforming band names.')        ds = satfetcher.conform_dea_ard_band_names(ds=ds,                                                    platform=platform)                # notify user        #arcpy.AddMessage('Creating a backup dataset for later.')                # make copy for ds for later cva work        #ds_backup = ds.copy(deep=True)                # get subset fo data for wet and dry season months        arcpy.AddMessage('Reducing dataset down to wet, dry months.')        ds = gdvspectra.subset_months(ds=ds,                                       month=wet_month + dry_month,                                      inplace=True)                                              # show ds        #arcpy.AddMessage(ds)                # calculate vegetation and moisture indices        arcpy.AddMessage('Generating vege/moist indices: {0}'.format(veg_idx, mst_idx))        ds = tools.calculate_indices(ds=ds,                                      index=['mavi', 'ndmi'],                                      custom_name=['veg_idx', 'mst_idx'],                                      rescale=True,                                      drop=True)        # show ds        #arcpy.AddMessage(ds)                # perform resampling        arcpy.AddMessage('Resampling dataset to annual wet/dry medians.')        ds = gdvspectra.resample_to_wet_dry_medians(ds=ds,                                                     wet_month=wet_month,                                                     dry_month=dry_month,                                                    inplace=True)                # show ds        #arcpy.AddMessage(ds)        # persist memoru        #ds = ds.persist()                # perform outlier removal        if zscore_pvalue:            arcpy.AddMessage('Removing outliers via Z-Score.')            ds = gdvspectra.nullify_wet_dry_outliers(ds=ds,                                                      wet_month=wet_month,                                                      dry_month=dry_month,                                                      p_value=0.01, # todo link this to param                                                     inplace=True)        # remove any years missing wet, dry season         arcpy.AddMessage('Removing any years missing wet, dry seasons.')        ds = gdvspectra.drop_incomplete_wet_dry_years(ds=ds)        # fill any empty first, last years using back/forward fill        arcpy.AddMessage('Filling any empty first and last years.')        ds = gdvspectra.fill_empty_wet_dry_edges(ds=ds,                                                 wet_month=wet_month,                                                  dry_month=dry_month,                                                 inplace=True)                                                         # interpolate missing values         arcpy.AddMessage('Interpolating missing values for wet, dry seasons.')        ds = gdvspectra.interp_empty_wet_dry(ds=ds,                                             wet_month=wet_month,                                             dry_month=dry_month,                                             method='full', #todo link to param                                             inplace=True)                                                     # standardise data to invariant targets derived from dry times        arcpy.AddMessage('Standardising data to dry season invariant targets.')        ds = gdvspectra.standardise_to_dry_targets(ds=ds,                                                    dry_month=dry_month,                                                    q_upper=0.99, # todo link to params                                                   q_lower=0.05, # todo link to params                                                   inplace=True)                                                           # calculate seasonal similarity        arcpy.AddMessage('Calculating seasonal similarity.')        ds_similarity = gdvspectra.calc_seasonal_similarity(ds=ds,                                                            wet_month=wet_month,                                                            dry_month=dry_month,                                                            q_mask=0.9, # todo link to params                                                            inplace=True)                                                                    # calculate gdv likelihood        arcpy.AddMessage('Calculating groundwater dependent vegetation likelihood.')        ds = gdvspectra.calc_likelihood(ds=ds,                                         ds_similarity=ds_similarity,                                        wet_month=wet_month,                                         dry_month=dry_month)                                                                                           # export likelihood as netcdf         # todo ask for this in input        out_nc_path = r'C:\Users\Lewis\Desktop\like_out.nc'        arcpy.AddMessage('Exporting GDV likelihood as netcdf to: {0}.'.format(out_nc_path))        tools.export_xr_as_nc(ds=ds,                               filename=out_nc_path)                # close nc        del ds, ds_similarity #, ds_backup        # notify user        arcpy.AddMessage('Generated GDV likelihood successfully.')                return